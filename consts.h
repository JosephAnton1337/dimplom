/*
#define Tstart          19837.
#define Px_start        0.1*0.003
#define Py_start	0.1*.0002
#define Teta_start      (0.4*3.14)
#define N0MAX 		.0001
otvet:
T=250137.205498033232288435
pu, pv 0.993119898566893644  0.117101951608344176
px, py 0.000007030545824194 0.000000841666206421
#define START		80000.
#define FINISH		100000.
*/
#define Tstart          250137.205498033232288435
#define Px_start        0.000007030545824194
#define Py_start	0.000000841666206421
#define Teta_start      (0.03*3.14)
#define N0MAX 		.0001
#define START		200.
#define FINISH		100000.









//#define FINISH		800.
//#define Tstart          10837.
//#define Px_start        0.1*0.003
//#define Py_start	0.1*0.0002
//            t                        x                       y                      u                     v                     m                   Px                    Py                   Pu                   Pv           
//    0.000000000000000000  1937.099999999999909051    0.000000000000000000  0.000000000000000000  0.449977733202062358 1.000000000000000000  0.000202012498565744 0.000103538365975549 0.445720207762307086  0.895172327762831288
//    0.000000000000000000  1937.099999999999909051    0.000000000000000000  0.000000000000000000  0.449977733202062358 1.000000000000000000  0.000202012498565744 0.000103538365975549 0.445720207762307086  0.895172327762831288

//#define Teta_start      (0.1*3.14)
//static double   n0_max=.001,                   // H / H

///#define Tstart          19837.
///#define Px_start        0.1*0.003
///#define Py_start	0.1*.0002
//            t                        x                       y                      u                     v                     m                   Px                    Py                   Pu                   Pv           
//    0.000000000000000000  1937.099999999999909051    0.000000000000000000  0.000000000000000000  0.449977733202062358 1.000000000000000000  0.000202012498565744 0.000103538365975549 0.445720207762307086  0.895172327762831288
///#define Teta_start      (0.4*3.14)


//    0.000000000000000000 41737.099999999998544808    0.000000000000000000  0.000000000000000000 0.096940645937684422 1.000000000000000000 0.000031364260118464 0.000002316456603329  0.997333780517055235  0.072974860325719995
//#define START		40000.
//#define FINISH		50000.
//#define Tstart          20837.
//    T=20837 СЃРµРєСѓРЅРґ; Px=0; Py=0
//static double   n0_max=.001,                   // H / H


//#define Tstart          50837. //183821
//     0.000000000000000000 41737.099999999998544808     0.000000000000000000  0.000000000000000000 0.096940645937684422 1.000000000000000000 0.000010045919764700 0.000002265170052987  0.975252724015410521  0.221093021826835268
//#define START		40000.
//#define FINISH		50000.
//static double   n0_max=.0001,                   // H / H


#define step            30.
#define step_max        300.
//#define Pmax            (0.4*g_Earth)
#define EPS             1.e-18
#define dopriACC        1.e-12
#define OUTFILE         "result"
#define h_dp_eps        1.e-10
#define ACC             1.e-4
#define MAXIT           18000
//Начальные значения T, Pu, Pv, шага для dopri, максимальный шаг для dopri,
//максимальная тяга, точность сравнения чисел в dopri и main,
//максимально допустимая относительная погрешность на шаге dopri
//файл в который записывается полученная траектория;
//eps для вычисления градиента f(x+eps)-f(x)/eps;
//точность с которой мы ищем траекторию (не);
//максимальное число шагов для метода Ньютона.

static double   impuls_a=0.000, // km/s
		R_Moon=384400,
    		R_Earth=6371,

		mu_Earth=398601.3,
		h0=START,
		hT=0,
//		P_ud=350.,
		g_Earth=9.81*0.001;
		



static double   n0_max=N0MAX,                   // H / H
		//mu_Moon=0.08*4902.79914059472,//km^3/s^2
		mu_Moon=mu_Earth,
		g_Moon=.00162,//km/s^2
		P_ud=350.;//s
		
static double 	//Pmax=n0_max*0.00981,//g_Moon,              // (AU/100) / day^2,         0.00001 H/H * g_Earth
		Pmax=n0_max*g_Earth,              // (AU/100) / day^2,         0.00001 H/H * g_Earth
                C=P_ud*g_Earth;                   // (AU/100) / day

static double 	//C=P_ud*g_Earth,
		v_circ_h0=sqrt(mu_Moon/(R_Earth+h0)),
		v_circ_hT=sqrt(mu_Moon/(R_Moon+hT));
